#ifndef C_BASIC_TOOLS_H_
#define C_BASIC_TOOLS_H_

#include"CBasicTypeDefine.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#define IS_TRUE_BIT(X)	(0 != (X))
#define IS_FALSE_BIT(X)	(0 == (X))
#define M_SetBit(X)		((X) = 1)
#define M_ClrBit(X)		((X) = 0)
#define M_MIN(X,Y)			((X) < (Y) ? (X) : (Y))
#define M_MAX(X,Y)			((X) > (Y) ? (X) : (Y))
#define M_NOT_ZERO_DEC(X)	{if(0 != (X)) {(X)--;} else {/*No action*/}}
#define IS_NULL_P(X)		(NULL == (X))

/***************************************************
	返回长度的内存拷贝,
协助解决内存拷贝地址忘记更改问题
	Eg. pu8Dst += M_MEM_CPY(pu8Dst, src, size); 
****************************************************/
#define M_MEM_CPY(pu8Dst,pu8Src,Size)	memcpy(pu8Dst, pu8Src, Size) ? (Size) : (Size) 

/* Character code support macros */
#define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
#define IsLower(c)	(((c)>='a')&&((c)<='z'))
#define IsDigit(c)	(((c)>='0')&&((c)<='9'))


#define SEC_IN_MIN		(60)
#define SEC_IN_HOUR	(3600U)
#define HOUR_IN_DAY	(24)
#define SEC_IN_DAY		((HOUR_IN_DAY) * (SEC_IN_HOUR))
#define MIN_IN_HOUR	(60)
#define MS_IN_SEC		(1000)
#define MS_IN_HOUR		((MS_IN_SEC) * (SEC_IN_HOUR))


/********************************************************
获取库版本号
**********************************************************/
s8* getCBasicLibVersion(); 

/*
*************************************************************************************************************************
* 功能描述：转换1个数字字符为数字, 是否为'0~9, a~f, A~F',  并判断该字符是否为数字字符
* 输入参数：isrc数据
* 输出参数：无
* 返回参数：转换后的数据-1: 出错, 否则返回转换后的数据
*************************************************************************************************************************
*/
s8 AsciiToHex( u8 isrc); 


/*
 ******************************************************************************
 * 功能描述：转换1个数字字符为数字是否为'0~9, a~f, A~F',并判断该字符是否为数字
 *           字符
 * 输入参数：isrc数据
 * 输出参数：无
 * 返回参数：转换后的数据
 *           -1: 出错
 * 外部调用：无
 * 注意事项：无
 ******************************************************************************
 */
s8 HexToAscii(u8 hex); 

/*
 ******************************************************************************
 * 功能描述：HEX 到 ASCII的转换函数
 * 输入参数：data: 转换数据的入口指针
 *		   buffer: 转换后数据入口指针
 *			 len : 需要转换的长度
 * 返回参数：转换后数据长度
 ******************************************************************************
 */
s16 Hex_2_Ascii(s8  *data, s8  *buffer, s16 len); 

u8 Hex4ToAscii(u8 hex); 


void Hex8ToAscii(s8  *dest,u8  src); 



void Hex16ToAscii(s8  *dest,u16 src); 



void Hex32ToAscii(s8  *dest,u32 src); 


u32 Ascii_2_Integer(u8 *dest, u8 len); 




/*
 ******************************************************************************
 * 功能描述：将一个字节的数据转换成两个字符表示，如0x6a转换成"6a"存放在16位
             数据中
 * 输入参数：isrc数据
 * 输出参数：无
 * 返回参数：转换后的数据
 * 外部调用：无
 * 注意事项：无
 ******************************************************************************
 */
u16 ByteToAscii( const u8 isrc ); 



/*
 ******************************************************************************
 * 功能描述：将一个字节的数据转换成两个字符表示，如0x6a转换成"6a".
 * 输入参数：bByte
 * 输出参数：pStr
 * 返回参数：0: 成功  -1: 失败
 ******************************************************************************
 */
s16 ByteToStr(u8 *pStr, u8 bByte); 



/*
 ******************************************************************************
 * 功能描述：ASCII 到 HEX的转换函数
 * 输入参数：O_data: 转换数据的入口指针，
 *			N_data: 转换后新数据的入口指针
 *			len : 需要转换的长度
 * 输出参数：无
 * 返回参数：-1: 转换失败
 *			其它：转换后数据长度
 * 注意：O_data[]数组中的数据在转换过程中会被修改。
 ******************************************************************************
 */
s16 Ascii_2_Hex(s8  *O_data, s8  *N_data, s16 len); 



void Bcd_2_Hex(s8 *bcd, s16 len); 


void Hex_2_Bcd(s8 *bcd, s16 len); 



/*压缩BCD码,注意,可能会丢掉最高位
当数值达到或超过100000000时丢失*/
u32 Hex2Bcd8421(u32 u32Hex); 



/*8421BCD 2 hex, len, max 5*/
u32 Bcd8421_2Hex(u8 *pu8SrcBcd, u8 u8Len); 



s16 Ascii_2_integer(s8  *O_data, s8  *N_data, s16 len); 




/*
 ******************************************************************************
 * 功能描述：将2个字符串合并成一个字节的数据，并将结果存放在目的地址中
 * 输入参数：psrc 字符串指针，如果输入的字符串非16进制的数据话就返回-1，否则为0
 * 输出参数：转换后的数据
 * 返回参数：-1: 错误
              0: 正确
 * 外部调用：无
 * 注意事项：无
 ******************************************************************************
 */
s16 AsciiToByte(const u8 * psrc, u8 * pdst ); 




/*
 ******************************************************************************
 * 功能描述：计算校验和
 * 输入参数：psrc 字符串指针
 *			  len 需要计算的长度
 * 输出参数：无
 * 返回参数：-1: 错误
              0: 正确
 * 外部调用：无
 * 注意事项：无
 ******************************************************************************
 */
u16 GetAddSum(u8 *psrc, s16 len); 



/*
-------------------------------------------------------------------------------------------------
-函数功能:	Get Xor verify data.
-参数说明:	
-------------------------------------------------------------------------------------------------
*/
u8 GetXorSum(u8 *psrc, u16 len); 



/*****************************************************************
	比较内存内容是否一致,不支持空内存比较
******************************************************************/



/***************************************************
	大写转变为小写,返回原源地址	指针
****************************************************/
u8 *UpperToLower(u8 *pu8Str, u16 u16Len); 


u8 LsbU32To4U8(u8 *pu8Dst, u32 u32Dat); 



u8 LsbU16To2U8(u8 *pu8Dst, u16 u16Dat); 


u16 Lsb2U8ToU16(u8 *pu8Dst); 


u32 Lsb4U8ToU32(u8 *pu8Dst); 



u8 MsbU32To4U8(u8 *pu8Dst, u32 u32Dat); 



u8 MsbU16To2U8(u8 *pu8Dst, u16 u16Dat); 



u16 Msb2U8ToU16(u8 *pu8Dst); 



u32 Msb4U8ToU32(u8 *pu8Dst); 




/***************************************************************
**最接近且大于等于某个正整数的2的整数次幂
输入值必须满足:(x<=0x80000000u)*
****************************************************************/
unsigned int RoundUpToPowerOf2(unsigned int x); 




/*************************************************
返回当天的秒数
**************************************************/
u32 app_sys_time2secs(time_t time);
/*************************************************
	年份都是在2000年基础上计算
	比如2015年,年份写15即可,返回自1970年
	以来的秒
***********************************************/
u32 app_sys_dtime2mktime(datetime_t daytime);
/**************************************************

**************************************************/
datetime_t app_sys_mktime2dtime(u32 mktime);

#endif


